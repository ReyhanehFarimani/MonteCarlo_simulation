{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GCMC Simulation Documentation Welcome to the documentation for the Grand Canonical Monte Carlo (GCMC) simulation project. This resource provides comprehensive guidance on using the simulation software, including the API documentation, installation instructions, and steps to run the program. Overview This project is designed for two-dimensional Monte Carlo simulations of interacting particles. Currently, the program supports both the NVT (canonical) and GCMC (grand canonical) ensembles. The codebase is structured to be highly modular, allowing users to easily extend the functionality by adding custom Monte Carlo moves or interaction potentials. The simulation is implemented in C++ with additional Python scripting for post-processing and extended functionality. To run this software, you will need to have a C++ compiler, MPI (Message Passing Interface) for parallelization -Still in progress-, and a Python environment set up. Features NVT and GCMC Simulations : Perform simulations in both canonical and grand canonical ensembles. Modular Design : Easily extend the codebase with custom Monte Carlo moves or interaction potentials. High Performance : Optimized for efficient computation using C++. Python Integration : Utilize Python for post-processing, analysis, and additional scripting. Installation Follow the Installation Guide to set up the necessary environment and compile the code. Running Simulations Learn how to configure and execute simulations by visiting the Running Simulations section. Test Scenarios Explore various test cases used to validate the simulation code in the Test Scenarios section. Examples For practical examples of using the software, refer to the Examples section. API Documentation Detailed API documentation is available here , generated using Doxygen. Credits This program was developed by Reyhaneh Afghahi Farimani. For inquiries or further information, please contact me at: reyhaneh.afghahi.farimani@univie.ac.at Table of Contents Installation Running Simulations Test Scenarios Examples API Documentation","title":"Home"},{"location":"#gcmc-simulation-documentation","text":"Welcome to the documentation for the Grand Canonical Monte Carlo (GCMC) simulation project. This resource provides comprehensive guidance on using the simulation software, including the API documentation, installation instructions, and steps to run the program.","title":"GCMC Simulation Documentation"},{"location":"#overview","text":"This project is designed for two-dimensional Monte Carlo simulations of interacting particles. Currently, the program supports both the NVT (canonical) and GCMC (grand canonical) ensembles. The codebase is structured to be highly modular, allowing users to easily extend the functionality by adding custom Monte Carlo moves or interaction potentials. The simulation is implemented in C++ with additional Python scripting for post-processing and extended functionality. To run this software, you will need to have a C++ compiler, MPI (Message Passing Interface) for parallelization -Still in progress-, and a Python environment set up.","title":"Overview"},{"location":"#features","text":"NVT and GCMC Simulations : Perform simulations in both canonical and grand canonical ensembles. Modular Design : Easily extend the codebase with custom Monte Carlo moves or interaction potentials. High Performance : Optimized for efficient computation using C++. Python Integration : Utilize Python for post-processing, analysis, and additional scripting.","title":"Features"},{"location":"#installation","text":"Follow the Installation Guide to set up the necessary environment and compile the code.","title":"Installation"},{"location":"#running-simulations","text":"Learn how to configure and execute simulations by visiting the Running Simulations section.","title":"Running Simulations"},{"location":"#test-scenarios","text":"Explore various test cases used to validate the simulation code in the Test Scenarios section.","title":"Test Scenarios"},{"location":"#examples","text":"For practical examples of using the software, refer to the Examples section.","title":"Examples"},{"location":"#api-documentation","text":"Detailed API documentation is available here , generated using Doxygen.","title":"API Documentation"},{"location":"#credits","text":"This program was developed by Reyhaneh Afghahi Farimani. For inquiries or further information, please contact me at: reyhaneh.afghahi.farimani@univie.ac.at","title":"Credits"},{"location":"#table-of-contents","text":"Installation Running Simulations Test Scenarios Examples API Documentation","title":"Table of Contents"},{"location":"installation/","text":"Installation To install the GCMC simulation, follow these steps: git clone git@github.com:ReyhanehFarimani/MonteCarlo_simulation.git cd MonteCarlo_simulation make all","title":"Installation"},{"location":"installation/#installation","text":"To install the GCMC simulation, follow these steps: git clone git@github.com:ReyhanehFarimani/MonteCarlo_simulation.git cd MonteCarlo_simulation make all","title":"Installation"},{"location":"running_simulations/","text":"Basic Usage To use the program one should make an 'input.txt' in a directory, with the following information and structure: # Simulation box dimensions boxLengthX 25.0 boxLengthY 25.0 # Number of particles in the simulation numParticles 100 # Particle initialization: 1 for random placement, 0 for grid placement randomPlacement 1 # Temperature of the simulation temperature 1 # Number of simulation steps numSteps 1000000000 # Time step for the simulation timeStep 0.1 # Output frequency: how often to log the results outputFrequency 10000 # Equilibration time: number of steps before starting to log equilibrationTime 1000 # Cutoff squared distance for potential calculations r2cut 2.0 # Type of potential: LennardJones, WCA, Yukawa, AthermalStar, Ideal potentialType AthermalStar # polymer functionality in case of Athermal star polymer f 10 # Type of simulation: NVT, GCMC simulationType GCMC # chemical potential in case of GCMC simulation mu 0.1 seed 1234 # Use cell list: 1 for yes, 0 for no useCellList 1 # Frequency for updating the cell list cellListUpdateFrequency 1000 # File names for logging positionFile particle_positions.xyz dataFile simulation_data.dat Running a GCMC Simulation To run a GCMC simulation, use the following command: cd /path_to_input ./path_to_installation/simulation","title":"Running Simulations"},{"location":"running_simulations/#basic-usage","text":"To use the program one should make an 'input.txt' in a directory, with the following information and structure: # Simulation box dimensions boxLengthX 25.0 boxLengthY 25.0 # Number of particles in the simulation numParticles 100 # Particle initialization: 1 for random placement, 0 for grid placement randomPlacement 1 # Temperature of the simulation temperature 1 # Number of simulation steps numSteps 1000000000 # Time step for the simulation timeStep 0.1 # Output frequency: how often to log the results outputFrequency 10000 # Equilibration time: number of steps before starting to log equilibrationTime 1000 # Cutoff squared distance for potential calculations r2cut 2.0 # Type of potential: LennardJones, WCA, Yukawa, AthermalStar, Ideal potentialType AthermalStar # polymer functionality in case of Athermal star polymer f 10 # Type of simulation: NVT, GCMC simulationType GCMC # chemical potential in case of GCMC simulation mu 0.1 seed 1234 # Use cell list: 1 for yes, 0 for no useCellList 1 # Frequency for updating the cell list cellListUpdateFrequency 1000 # File names for logging positionFile particle_positions.xyz dataFile simulation_data.dat","title":"Basic Usage"},{"location":"running_simulations/#running-a-gcmc-simulation","text":"To run a GCMC simulation, use the following command: cd /path_to_input ./path_to_installation/simulation","title":"Running a GCMC Simulation"},{"location":"test_scenarios/","text":"Test Scenarios This document outlines the test scenarios used to validate the Grand Canonical Monte Carlo (GCMC) simulation code. For running the simulations by yourself please follow this procedure: cd sys_tests/ make clean make all mpirun -np 'number-of-cores' ./sys_tests 1. Ideal Gas Description In the grand canonical ensemble, the chemical potential ( \\mu ) controls the exchange of particles between the system and a reservoir. For an ideal gas, the fugacity (z) is defined as: $$ z = e^{\\beta \\mu} $$ where ( \\beta = \\frac{1}{k_B T} ). Fugacity can be interpreted as the \"effective pressure\" exerted by the particles in the system, simplifying the calculation of the number of particles. The average number of particles ( \\langle N \\rangle ) in the system can be derived from the fugacity: $$ \\langle N \\rangle = \\frac{V z}{\\lambda^2} $$ where: - ( V ) is the volume of the system, - ( \\lambda ) is the thermal de Broglie wavelength, which depends on the temperature and mass of the particles. This equation indicates that the number of particles in an ideal gas increases linearly with the volume and fugacity, and inversely with the square of the thermal wavelength. The pressure ( P ) in the system can also be related to the average number of particles ( \\langle N \\rangle ) and the temperature: $$ P = \\frac{k_B T \\langle N \\rangle}{V} $$ This is consistent with the ideal gas law, showing that the pressure is directly proportional to the number of particles and temperature, and inversely proportional to the volume. Summary This ideal gas test serves to validate the Grand Canonical Monte Carlo (GCMC) simulation by comparing the simulation results for the average number of particles ( \\langle N \\rangle ) and the pressure ( P ) with the theoretical predictions. The fugacity is a key factor in determining the number of particles in the system, and the pressure is expected to follow the ideal gas law. Results Results Plot The discrepancies observed between the theoretical predictions and the simulation results were likely due to insufficient simulation time and the system not reaching equilibrium. To achieve more accurate results, the simulation should be run for a longer period to ensure equilibrium is established. 2. Lennard-Jones Fluid Description This test simulates a fluid using the Lennard-Jones potential, a common model for intermolecular interactions. Expected Outcome The density of the fluid should match known values for Lennard-Jones fluids under specific conditions. Deviations may indicate issues with the potential implementation or simulation parameters. 3. Hard Sphere Fluid Description This test simulates a system of hard spheres, where particles interact only through elastic collisions, with no other forces acting between them. Expected Outcome The radial distribution function ( g(r) ) should follow theoretical predictions. This function describes how particle density varies as a function of distance from a reference particle, and it is critical for understanding the structure of fluids. Testing the Scenarios Each scenario should be run individually, with results compared against analytical solutions or published data where applicable. This ensures the GCMC simulation code is accurately modeling physical systems. Additional Considerations Parameter Sensitivity : Ensure that the simulation parameters, such as temperature, chemical potential, and volume, are varied systematically to test the robustness of the simulation. Performance Metrics : Evaluate the performance of the simulation in terms of computational efficiency and convergence rates, especially for more complex scenarios like the Lennard-Jones fluid.","title":"Test Scenarios"},{"location":"test_scenarios/#test-scenarios","text":"This document outlines the test scenarios used to validate the Grand Canonical Monte Carlo (GCMC) simulation code. For running the simulations by yourself please follow this procedure: cd sys_tests/ make clean make all mpirun -np 'number-of-cores' ./sys_tests","title":"Test Scenarios"},{"location":"test_scenarios/#1-ideal-gas","text":"","title":"1. Ideal Gas"},{"location":"test_scenarios/#description","text":"In the grand canonical ensemble, the chemical potential ( \\mu ) controls the exchange of particles between the system and a reservoir. For an ideal gas, the fugacity (z) is defined as: $$ z = e^{\\beta \\mu} $$ where ( \\beta = \\frac{1}{k_B T} ). Fugacity can be interpreted as the \"effective pressure\" exerted by the particles in the system, simplifying the calculation of the number of particles. The average number of particles ( \\langle N \\rangle ) in the system can be derived from the fugacity: $$ \\langle N \\rangle = \\frac{V z}{\\lambda^2} $$ where: - ( V ) is the volume of the system, - ( \\lambda ) is the thermal de Broglie wavelength, which depends on the temperature and mass of the particles. This equation indicates that the number of particles in an ideal gas increases linearly with the volume and fugacity, and inversely with the square of the thermal wavelength. The pressure ( P ) in the system can also be related to the average number of particles ( \\langle N \\rangle ) and the temperature: $$ P = \\frac{k_B T \\langle N \\rangle}{V} $$ This is consistent with the ideal gas law, showing that the pressure is directly proportional to the number of particles and temperature, and inversely proportional to the volume.","title":"Description"},{"location":"test_scenarios/#summary","text":"This ideal gas test serves to validate the Grand Canonical Monte Carlo (GCMC) simulation by comparing the simulation results for the average number of particles ( \\langle N \\rangle ) and the pressure ( P ) with the theoretical predictions. The fugacity is a key factor in determining the number of particles in the system, and the pressure is expected to follow the ideal gas law.","title":"Summary"},{"location":"test_scenarios/#results","text":"Results Plot The discrepancies observed between the theoretical predictions and the simulation results were likely due to insufficient simulation time and the system not reaching equilibrium. To achieve more accurate results, the simulation should be run for a longer period to ensure equilibrium is established.","title":"Results"},{"location":"test_scenarios/#2-lennard-jones-fluid","text":"","title":"2. Lennard-Jones Fluid"},{"location":"test_scenarios/#description_1","text":"This test simulates a fluid using the Lennard-Jones potential, a common model for intermolecular interactions.","title":"Description"},{"location":"test_scenarios/#expected-outcome","text":"The density of the fluid should match known values for Lennard-Jones fluids under specific conditions. Deviations may indicate issues with the potential implementation or simulation parameters.","title":"Expected Outcome"},{"location":"test_scenarios/#3-hard-sphere-fluid","text":"","title":"3. Hard Sphere Fluid"},{"location":"test_scenarios/#description_2","text":"This test simulates a system of hard spheres, where particles interact only through elastic collisions, with no other forces acting between them.","title":"Description"},{"location":"test_scenarios/#expected-outcome_1","text":"The radial distribution function ( g(r) ) should follow theoretical predictions. This function describes how particle density varies as a function of distance from a reference particle, and it is critical for understanding the structure of fluids.","title":"Expected Outcome"},{"location":"test_scenarios/#testing-the-scenarios","text":"Each scenario should be run individually, with results compared against analytical solutions or published data where applicable. This ensures the GCMC simulation code is accurately modeling physical systems.","title":"Testing the Scenarios"},{"location":"test_scenarios/#additional-considerations","text":"Parameter Sensitivity : Ensure that the simulation parameters, such as temperature, chemical potential, and volume, are varied systematically to test the robustness of the simulation. Performance Metrics : Evaluate the performance of the simulation in terms of computational efficiency and convergence rates, especially for more complex scenarios like the Lennard-Jones fluid.","title":"Additional Considerations"}]}